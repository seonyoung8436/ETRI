"""   Fall Risk Assessment using CNN
   
    Implemented Cross Validation

    Developed by SunYoung Kim
    Date: 2019.02.14
    (C) ETRI

"""

import keras
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import common_functions
import argparse
from sklearn.preprocessing import minmax_scale
from sklearn.model_selection import ShuffleSplit
from sklearn.metrics import mean_squared_error
from keras.models import Model, Sequential
from keras.layers import *
from keras.optimizers import Adam
from keras.optimizers import SGD
from keras.layers.advanced_activations import LeakyReLU


BBSnDefault = 1

Train_datalist_name = ["1_1","2_1","3_1","4_1","5_1","6_1","7_1","8_1","9_1","10_1",
                 "11_1","12_1","13_1","14_1","15_1","16_1","17_1","18_1","19_1","20_1",
                 "21_1","22_1","23_1","24_1","25_1","26_1","27_1","28_1","29_1","30_1",
                 "31_1","32_1","33_1","34_1","35_1","36_1","37_1","38_1","39_1","40_1",
                 "1_2","2_2","3_2","4_2","5_2","6_2","7_2","8_2","9_2","10_2",
                 "11_2","12_2","13_2","14_2","15_2","16_2","17_2","18_2","19_2","20_2",
                 "21_2","22_2","23_2","24_2","25_2","26_2","27_2","28_2","29_2","30_2",
                 "31_2","32_2","33_2","34_2","35_2","36_2","37_2","38_2","39_2","40_2",
                 "1_3","2_3","3_3","4_3","5_3","6_3","7_3","8_3","9_3","10_3",
                 "11_3","12_3","13_3","14_3","15_3","16_3","17_3","18_3","19_3","20_3",
                 "21_3","22_3","23_3","24_3","25_3","26_3","27_3","28_3","29_3","30_3",
                 "31_3","32_3","33_3","34_3","35_3","36_3","37_3","38_3","39_3","40_3",
                 "41_1","42_1","43_1","44_1","45_1","46_1","47_1","48_1","49_1","50_1",
                 "41_2","42_2","43_2","44_2","45_2","46_2","47_2","48_2","49_2","50_2",
                 "41_3","42_3","43_3","44_3","45_3","46_3","47_3","48_3","49_3","50_3"]

def my_get_args():
   """This function parses and return arguments passed in
   """

   parser = argparse.ArgumentParser(description='Input Data')
   # Add arguments
   parser.add_argument(
      '-b', '--bbs', type=int, help='BBS Number', default=BBSnDefault, required=False)

   args = parser.parse_args()

   return args


def Find_Max_Width(Train):
   """ Find maximum width from Train data
   """

   Max_Train = 0
   
   for tr in Train:
      if(Max_Train < tr.shape[1]):
         Max_Train = tr.shape[1]

   return Max_Train


def Preprocessing(Train, Max_Width):
   """ Normalize, Padding, and Increase Dimension from 2D to 3D
   """

   x_training = []
   X_Train_Modified = []

   for i in range(len(Train)):
      temp = Train[i].astype('float64')
      temp2 = minmax_scale(temp,(0,1))
      x_training.append(temp2)
      
      num_pad = Max_Width - Train[i].shape[1]
      npad = ((0,0),(0,num_pad))
      tmp = np.pad(x_training[i],npad,'constant',constant_values=(0))
      X_Train_Modified.append(tmp)
      
      X_Train_Modified[i] = X_Train_Modified[i].reshape(X_Train_Modified[i].shape[0],X_Train_Modified[i].shape[1], 1)
      
   return X_Train_Modified


def Create_Model(Max_Width):
   model = Sequential()

   model.add(Conv2D(32, (3, 3),strides = 2, input_shape=(132, Max_Width, 1)))
   model.add(Activation('elu'))
   model.add(MaxPooling2D(pool_size=(2, 2)))

   model.add(Conv2D(32, (3, 3)))
   model.add(Activation('elu'))
   model.add(MaxPooling2D(pool_size=(2, 2)))

   model.add(Conv2D(64, (2, 2)))
   model.add(Activation('elu'))
   model.add(MaxPooling2D(pool_size=(2, 2)))

   model.add(Flatten())
   model.add(BatchNormalization())
   model.add(Dense(32))
   model.add(Activation('elu'))

   model.add(Dense(5, activation='softmax'))
   
   sgd = SGD(lr=0.01, nesterov=True)
   model.compile(loss = 'mean_squared_error',optimizer='sgd',metrics=['accuracy'])
   
   return model


def FRA_Main(bbs_number):
   """ Use CNN Model
      Use Cross Validation with k=6
   """
   # Load Data
   X_Train = []

   for name in Train_datalist_name:
      # Read csv file and store to dataframe structure
      data = pd.read_csv(("Fra_Gray_padding/"+str(name)+"_"+str(bbs_number)+".csv"), sep=",", header=-1, na_filter=False)

      X_Train.append(data)

   Label_Train = pd.read_csv(("Label.csv"),sep=",",header = 0,na_filter=False)
   Label_Train = keras.utils.to_categorical(Label_Train, 5)

   # Preprocessing
   maxWidth = Find_Max_Width(X_Train)
   X_Train = Preprocessing(X_Train, maxWidth)

   # Create Model
   model = Create_Model(maxWidth)
   model.summary()

   # K-fold Cross Validation
   valid_split = 1/6
   cv = ShuffleSplit(n_splits=6, test_size=valid_split, random_state=7)
   Label = Label_Train[:,bbs_number-1]
   cv_Results = []
   valid_score = 0
   accuracy = []

   softmax_output_all_fold = []
   Y_valid_all_fold = []

   for train_index, test_index in cv.split(X_Train):
      
      X_train, Y_train = [],[]
      X_valid, Y_valid = [],[]
   
      for i in range(len(train_index)):
         X_train.append(X_Train[train_index[i]])
         Y_train.append(Label[train_index[i]])

      for j in range(len(test_index)):
         X_valid.append(X_Train[test_index[j]])
         Y_valid.append(Label[test_index[j]])

      model = Create_Model(maxWidth) 
      model.fit(np.array(X_train),np.array(Y_train),epochs = 25,validation_data=(np.array(X_valid),np.array(Y_valid)))
      score, acc = model.evaluate(np.array(X_valid), np.array(Y_valid), batch_size=1)   
      accuracy.append(acc)

      print('Test score : ', score)
      print('Test accuracy : ', acc)

      cv = np.argmax(model.predict(np.array(X_valid)),axis=1)
      cvpreds = model.predict(np.array(X_valid))
      #cv_Results.append(cv)
      temp_valid_err = mean_squared_error(Y_valid,cvpreds)
      valid_score += temp_valid_err

      Y_valid_all_fold.extend(Y_valid)
      softmax_output_all_fold.extend(cvpreds)   
   # end for train_index, test_index in cv.split(X_Train):

   softmax_output_all_fold = np.stack(softmax_output_all_fold,axis = 0)   

   print("avg accuracy : ",sum(accuracy)/len(accuracy)) 

   print('\nEvaluate All Folds')
   common_functions.evaluate_prediction(Y_valid_all_fold,softmax_output_all_fold,5)


if __name__ == "__main__":
   args = my_get_args()

   FRA_Main(args.bbs)
